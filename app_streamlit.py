import streamlit as st
import requests

# URL da API Flask no Render
API_URL = "https://precificacao-app.onrender.com"

st.set_page_config(page_title="Painel de Precifica√ß√£o", layout="wide")

st.title("üí∞ Painel de Precifica√ß√£o Senac 2026")
st.caption("Integra√ß√£o: Flask + PostgreSQL + Streamlit")

# --- Carregar n√≠veis do backend ---
st.subheader("N√≠veis Profissionais")
try:
    resp = requests.get(f"{API_URL}/levels")
    if resp.status_code == 200:
        levels = resp.json()
        if levels:
            for lvl in levels:
                st.write(f"**{lvl['name']}** - R$ {lvl['hourly_total']}/h")
        else:
            st.info("Nenhum n√≠vel cadastrado ainda.")
    else:
        st.error("Erro ao acessar API de n√≠veis.")
except Exception as e:
    st.error(f"Erro de conex√£o: {e}")

# --- Formul√°rio de simula√ß√£o ---
st.subheader("Simula√ß√£o de Pre√ßo")

course_name = st.text_input("Nome do Curso")
hours = st.number_input("Carga Hor√°ria", min_value=1, value=40)
students = st.number_input("N√∫mero de Alunos", min_value=1, value=20)

level_names = []
try:
    level_names = [lvl["name"] for lvl in levels]
except:
    level_names = ["N√çVEL I", "N√çVEL II", "N√çVEL III"]

selected_level = st.selectbox("N√≠vel do Instrutor", level_names)

if st.button("Calcular Pre√ßo"):
    st.success(f"‚úÖ Simula√ß√£o criada para o curso **{course_name}** ({selected_level})")
    st.write(f"- Carga hor√°ria: {hours}h")
    st.write(f"- N√∫mero de alunos: {students}")
